/* */
"format cjs";function expect(e){function t(e){s.push(e)}var s=[];return after_checks.push(function(){assert.deepEqual(s.sort(),e.sort())}),common.mustCall(t,e.length)}function listener(){}var common=require("./common"),assert=require("github:jspm/nodelibs@0.0.3/assert"),events=require("../index"),after_checks=[];after(function(){for(var e=0;e<after_checks.length;++e)after_checks[e]()});var e1=new events.EventEmitter;e1.on("foo",listener),e1.on("bar",listener),e1.on("baz",listener),e1.on("baz",listener);var fooListeners=e1.listeners("foo"),barListeners=e1.listeners("bar"),bazListeners=e1.listeners("baz");e1.on("removeListener",expect(["bar","baz","baz"])),e1.removeAllListeners("bar"),e1.removeAllListeners("baz"),assert.deepEqual(e1.listeners("foo"),[listener]),assert.deepEqual(e1.listeners("bar"),[]),assert.deepEqual(e1.listeners("baz"),[]),assert.deepEqual(fooListeners,[listener]),assert.deepEqual(barListeners,[listener]),assert.deepEqual(bazListeners,[listener,listener]),assert.notEqual(e1.listeners("bar"),barListeners),assert.notEqual(e1.listeners("baz"),bazListeners);var e2=new events.EventEmitter;e2.on("foo",listener),e2.on("bar",listener),e2.on("removeListener",expect(["foo","bar","removeListener"])),e2.on("removeListener",expect(["foo","bar"])),e2.removeAllListeners(),console.error(e2),assert.deepEqual([],e2.listeners("foo")),assert.deepEqual([],e2.listeners("bar"));
//# sourceMappingURL=remove-all-listeners.js.map